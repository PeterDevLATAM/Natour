$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-gray-dark: #777;
$color-white: #fff;
$color-black: #000;

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit; /* It's considered a slightly better practice to do it like this bc it makes it easy to change 
  when using plugins   */
}

html {
  /* We did this in order to make it easy when converting all length units to rem
  rem units are based on the root element computed font seize
  */
  /* font-size: 10px;
  
  it can be done like this but is a bad practice to overwrite the default font size (16px)
   or whatever font size the user has as defalut so is better to declare it in porcentages of the default  */

  font-size: 62.5%; /* 10/16=0.625 */
}

body {
  /* place to set fonts bc font is inherited */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: $color-gray-dark;
  padding: 3rem;

  box-sizing: border-box;
}

.header {
  height: 95vh; /* 95% of viewport hight */
  background-image: linear-gradient(
      to right,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url("../img/hero.jpg"); /* To use 2 bkground images you just separate with a comma */
  background-size: cover;
  background-position: top;

  /* New peoperty of clip-path, needs the coordenates related to the parent 
   element to define a shape to make visible the parent element or not
   example: 
   clip-path: polygon(x y,x y,x y); it goes clockwise starting for topleft
   */

  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  position: relative; /* That makes the element a reference for the absolute position childs */

  &__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
  }
  &__logo {
    height: 3.5rem;
  }

  &__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* Thats a way to center blocks, bc translate is relative to the 
      element not to the parent  */
    text-align: center; /* to align the btn (link) bc it is inline-block and behaves like text */
  }
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;
  margin-bottom: 6rem;

  &--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    /* here you call the correspondent keyframe and assign a duration */

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
  }
  &--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.74rem;

    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out;
  }
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80% {
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

.btn {
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem;
  }

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);
    &::after {
      transform: scaleX(1.6) scaleY(1.4);
      opacity: 0;
    }
  }

  &:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
  }
  &::after {
    content: "";
    display: inline-block; /* bc the parent (btn) is also inline-block */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* put it behind the btn */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;

    transition: all 0.4s;
  }

  &--white {
    background-color: $color-white;
    color: $color-gray-dark;
    &::after {
      background-color: $color-white;
    }
  }

  &--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    animation-fill-mode: backwards; /* Applies the style of the 0% before the delay kicks in */
  }
}
